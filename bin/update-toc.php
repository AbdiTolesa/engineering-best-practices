#!/usr/bin/env php
<?php

chdir( __DIR__ . '/..' );

function slugify( $heading ) {
	return trim( preg_replace( '/\W+/', '-', strtolower( str_replace( '&', 'amp', $heading ) ) ), '-' );
}

$pages_meta = array();

foreach ( glob( '*.md' ) as $page_filename ) {
	$content = file_get_contents( $page_filename );
	if ( ! preg_match( '/^---(?P<raw_meta>.+?)---(?P<raw_content>.+$)/s', $content, $matches ) ) {
		continue;
	}
	if ( ! preg_match_all( '/^(?P<key>\w+): *(?P<value>[^\n]+)/m', $matches['raw_meta'], $meta_matches, PREG_SET_ORDER ) ) {
		print "WARNING<$page_filename>: Unable to parse raw_meta\n";
		continue;
	}
	if ( ! preg_match( '#{% capture \w+ %}{% include (?P<markdown_include>markdown/\w+\.md) %}{% endcapture %}#', $matches['raw_content'], $content_matches ) ) {
		print "WARNING<$page_filename>: Unable to parse markdown_include\n";
		continue;
	}
	$markdown_include_path = '_includes/' . $content_matches['markdown_include'];
	if ( ! file_exists( $markdown_include_path ) ) {
		print "WARNING<$page_filename>: File not exists: $markdown_include_path\n";
		continue;
	}

	$meta = array();
	foreach ( $meta_matches as $meta_match ) {
		$meta[ $meta_match['key'] ] = $meta_match['value'];
	}
	$meta['headings'] = array();

	// Re-build the subnav from the h3 elements.
	$meta['subnav'] = '';
	$include_file_contents = file_get_contents( $markdown_include_path );
	if ( preg_match_all( '/^##(#+)\s*(.+)$/m', $include_file_contents, $heading_matches, PREG_SET_ORDER ) ) {
		foreach ( $heading_matches as $heading_match ) {
			$heading_count = strlen( $heading_match[1] );
			$heading_text = stripslashes( $heading_match[2] );
			$heading_slug = slugify( $heading_text );

			if ( 1 === $heading_count ) {
				$meta['subnav'] .= "\n  - title: $heading_text";
				$meta['subnav'] .= "\n    tag: $heading_slug";
			}

			$meta['headings'][] = array(
				'depth' => $heading_count,
				'title' => $heading_text,
				'slug' => $heading_slug,
			);
		}
	}

	// Only update the updated date if it is dirty
	$exit_code = 0;
	system(
		sprintf(
			'git diff-index --quiet HEAD -- %s %s',
			escapeshellarg( $page_filename ),
			escapeshellarg( $markdown_include_path )
		),
		$exit_code
	);
	if ( 0 !== $exit_code ) {
		$meta['updated'] = gmdate( 'Y-m-d H:i:s\Z' );
	}

	$pages_meta[ $page_filename ] = $meta;

	// Skip updating the meta since it hasn't changed.
	if ( 0 === $exit_code ) {
		continue;
	}

	// Rebuild the meta.
	$new_page = "---\n";
	foreach ( $meta as $key => $value ) {
		if ( ! in_array( $key, array( 'page', 'title', 'nav', 'group', 'weight', 'layout', 'updated', 'subnav' ) ) ) {
			continue;
		}

		$new_page .= "$key:";
		if ( preg_match( '/^\n/', $value ) ) {
			$new_page .= $value . "\n";
		} else {
			$new_page .= " $value\n";
		}
	}
	$new_page .= "---";
	$new_page .= $matches['raw_content'];

	file_put_contents( $page_filename, $new_page );
	system( sprintf( 'git add %s', escapeshellarg( $page_filename ) ) );
}

// @todo Check for broken links.

$toc = "<div class='toc'>\n";
$toc .= "\t<!-- DO NOT MODIFY THE TOC ELEMENT. IT IS GENERATED BY bin/update-toc.php -->\n";
$toc .= "\t<header>\n";
$toc .= "\t\t<h2>Table of Contents</h2>\n";
$toc .= "\t</header>\n";

uasort( $pages_meta, function( $a, $b ) {
	return $a['weight'] - $b['weight'];
} );

foreach ( $pages_meta as $page_filename => $page_meta ) {
	$path = ( 'index.md' === $page_filename ? '' : $page_meta['page'] );
	$path .= '/';

	$toc .= "\t<div class='col'>\n";
	$toc .= sprintf( "\t\t<h3><a href='{{ HOME_PATH }}%s'>%s</a></h3>\n", $path, $page_meta['title'] );

	$last_depth = $page_meta['headings'][0]['depth'];

	$indent = 2;
	$headings = $page_meta['headings'];
	$toc .= "\t\t<ul>\n";
	for ( $i = 0; $i < count( $headings ); $i += 1 ) {
		$this_heading = $headings[ $i ];
		$this_depth = $this_heading['depth'];
		if ( 1 !== $this_depth ) {
			continue;
		}

		$toc .= str_repeat( "\t", $indent + $this_depth ) . "<li>\n";
		$toc .= str_repeat( "\t", $indent + $this_depth + 1 );
		$toc .= sprintf( '<a href="%s#%s">', $path, $this_heading['slug'] );
		$toc .= $this_heading['title'];
		$toc .= "</a>\n";
		$toc .= str_repeat( "\t", $indent + $this_depth ) . "</li>\n";

		// @todo $next_heading = isset( $headings[ $i + 1 ] ) ? $headings[ $i + 1 ] : null;
		// @todo $next_depth = $next_heading ? $next_heading['depth'] : 0;
		// @todo $prev_heading = isset( $headings[ $i - 1 ] ) ? $headings[ $i - 1 ] : null;
		// @todo $prev_depth = $prev_heading ? $prev_heading['depth'] : 0;

	}
	$toc .= "\t\t</ul>\n";
	$toc .= "\t</div>\n";
}
$toc .= "</div><!-- /.toc -->";


$page_filename = 'index.md';
$index_file_contents = file_get_contents( $page_filename );
$count = 0;
$index_file_contents = preg_replace( '#<div class=\'toc\'>.+?</div><!-- /.toc -->#s', $toc, $index_file_contents, 1, $count );
if ( 0 === $count ) {
	echo "WARNING: Unable to update TOC in $page_filename\n";
} else {
	file_put_contents( $page_filename, $index_file_contents );
	system( sprintf( 'git add %s', escapeshellarg( $page_filename ) ) );
}

echo "TOC Regenerated\n";
